type: edu
files:
- name: translator/translator.py
  visible: true
  text: |
    print('Hello, World!')
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult
    import requests
    from itertools import chain
    from bs4 import BeautifulSoup
    import sys
    import os


    if sys.platform.startswith("win"):
        import _locale

        # pylint: disable=protected-access
        _locale._getdefaultlocale = (lambda *args: ['en_US', 'utf8'])

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    languages = ["arabic", "german", "english", "spanish", "french",
                 "hebrew", "japanese", "dutch", "polish", "portuguese",
                 "romanian", "russian", "turkish"]


    class TranslatorTest(StageTest):
        def generate(self):
            return [
                TestCase(stdin='3\n0\nwhat\n', attach='3\n0\nwhat', time_limit=30000),
                TestCase(stdin='5\n0\nmiracles\n', attach='5\n0\nmiracles', time_limit=30000),
                TestCase(stdin='12\n3\nглаза\n', attach='12\n3\nглаза', time_limit=30000)
            ]

        def check_output(self, output, true_results):
            output = output.lower()

            for language in true_results:
                translations_title = '{} translation'.format(language).lower()
                if translations_title not in output:
                    return False, 'The title \"{0} translation\" was not found.'.format(language)
                examples_title = "{0} example".format(language).lower()
                translations = output[output.index(translations_title):].strip()

                if examples_title not in translations.lower():
                    return False, 'The title \"{0}\" was not found.\n' \
                                  'Make sure you output this title before example sentences for this language,\n' \
                                  'and that you output it after translations for it.'.format(examples_title)

                # the beginning of the section with context examples
                examples_index = translations.index(examples_title)
                try:
                    # the end of the section with context examples
                    examples_end = translations.index('translation', examples_index)
                except ValueError:
                    # if the language is last in the list, the end of the context examples is the end of the output
                    examples_end = None
                examples = translations[examples_index:examples_end].split('\n')
                translations = translations[:examples_index].strip().split('\n')
                examples = [line for line in examples if line and examples_title not in line]
                translations = [line for line in translations if line and translations_title not in line]

                if len(translations) == 0:
                    return False, "No translations for {0} are found.\n" \
                                  "Make sure that each translated word is placed in a new line\n" \
                                  "and that translations precede examples.".format(language)

                if len(examples) == 0:
                    return False, "No context examples for {0} are found.\n" \
                                  "Make sure that your context examples follow the translations\n" \
                                  "and that each example is placed in a new line.".format(language)

                true_translations, true_examples = true_results[language]
                if true_translations == "Connection error":
                    return CheckResult.wrong("Connection error occurred while connecting to the context.reverso.net\n"
                                             "Please, try again a bit later.")

                translations_intersection = [True for user_translation in translations
                                             if user_translation in true_translations]
                if not translations_intersection:
                    return False, "No correct translations for {0} are found.\n" \
                                  "Please, output the first found translation " \
                                  "of the given word for this language if you output one translation.".format(language)

                examples_intersection = [True for user_example in examples if user_example in true_examples]
                if not examples_intersection:
                    return False, "No correct examples for {0} are found.\n" \
                                  "If you output only one example for each language,\n" \
                                  "please, use the first example that you find on the web page.".format(language)

            return True, ''

        def check(self, reply, attach):
            l1, l2, word = attach.split("\n")
            l1, l2 = int(l1), int(l2)
            result_dict = get_results(l1, l2, word)

            file_name = word + '.txt'
            if not os.path.exists(file_name):
                return CheckResult.wrong("Looks like you didn't create a file named <word>.txt \n"
                                         "where <word> is the word that should be translated.")

            with open(file_name, 'r', encoding='utf-8') as fh:
                try:
                    output = fh.read()
                except UnicodeDecodeError:
                    return CheckResult.wrong("UnicodeDecodeError occurred while reading your file. \n"
                                             "Perhaps you used the wrong encoding? Please, use utf-8 encoding.")

            if output.lower().strip() not in reply.lower().strip():
                return CheckResult.wrong("The output to the terminal does not seem to contain the content of the file.\n"
                                         "Please make sure that you output the results to the terminal as well.\n"
                                         "Also, make sure that the output to the terminal contains all the data written to the file unmodified.")

            is_correct, feedback = self.check_output(output, result_dict)
            if not is_correct:
                if "Connection error" not in feedback:
                    feedback = f'A problem occurred while reading the file "{file_name}".\n' + feedback
                return CheckResult.wrong(feedback)

            try:
                os.remove(file_name)
            except:
                return CheckResult.wrong("An error occurred while your file was being removed.\n"
                                         "Please make sure that you close all the files after writing the results in them.")

            return CheckResult.correct()


    def get_results(l1, l2, word):
        l1 -= 1
        if l2 == 0:
            target_languages = languages[:l1] + languages[l1 + 1:]
        else:
            target_languages = [languages[l2 - 1]]
        l1 = languages[l1]

        result_dict = {}

        for lang_to in target_languages:
            url = f"https://context.reverso.net/translation/{l1}-{lang_to}/{word}"
            user_agent = 'Mozilla/5.0'
            try:
                response = requests.get(url, timeout=10, headers={'User-Agent': user_agent})
            except requests.exceptions.ReadTimeout:
                return "Connection error", "Connection error"
            except requests.exceptions.ConnectionError:
                return "Connection error", "Connection error"

            raw_contents = BeautifulSoup(response.content, 'html.parser')
            translations = raw_contents.find_all('span', {'class': 'display-term'})
            sentences_src, sentences_target = \
                raw_contents.find_all('div', {"class": "src ltr"}), \
                raw_contents.find_all('div', {"class": ["trg ltr", "trg rtl arabic", "trg rtl"]})

            translation_list = [translation.get_text().strip().lower() for translation in translations]
            sentence_list = [sentence.get_text().strip().lower() for sentence in
                             list(chain(*[sentence_pair for sentence_pair in zip(sentences_src, sentences_target)]))]
            result_dict[lang_to] = [set(translation_list), set(sentence_list)]

        return result_dict


    if __name__ == '__main__':
        TranslatorTest('translator.translator').run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test.tests import TranslatorTest

    if __name__ == '__main__':
        TranslatorTest('translator.translator').run_tests()
  learner_created: false
- name: translator/menus.py
  visible: true
  text: |
    from data import TranslationData

    LANGUAGES = ['arabic', 'german', 'english', 'spanish', 'french', 'hebrew',
                 'japanese', 'dutch', 'polish', 'portuguese', 'romanian',
                 'russian', 'turkish']


    class Menus:
        def __init__(self):
            ...

        @staticmethod
        def welcome():
            print('Hello, welcome to the translator. Translator supports: ')
            print(*(f'{i}. {lang.capitalize()}' for i, lang
                    in enumerate(LANGUAGES, start=1)), sep='\n')

        def choose_first_lang(self) -> str:
            return self._choose_lang('Type the number of your language:\n')

        def choose_second_lang(self) -> str:
            return self._choose_lang('Type the number of language you want '
                                     'to translate to:\n')

        @staticmethod
        def _choose_lang(text: str) -> str:
            return LANGUAGES[-1 + int(input(text))]

        @staticmethod
        def choose_word() -> str:
            return input('Type the word you want to translate:\n')
  learner_created: true
- name: translator/queries.py
  visible: true
  text: |
    import time
    import requests
    from bs4 import BeautifulSoup
    from data import TranslationData, TranslationResult

    HEADERS = {'User-Agent': 'Mozilla/5.0'}


    class ReversoQuery:
        @staticmethod
        def _form_url(tr_data: TranslationData) -> str:
            return f'https://context.reverso.net/translation/{tr_data.src_lang}-' \
                   f'{tr_data.trg_lang}/{tr_data.word}'

        @staticmethod
        def _make_query(tr_data: TranslationData) -> requests.Response:
            url = ReversoQuery._form_url(tr_data)
            for _ in range(5):
                r = requests.get(url, headers=HEADERS)
                if r:
                    return r
                time.sleep(.02)

        @staticmethod
        def _parse_response(resp: requests.Response, trg_lang: str) -> TranslationResult:
            soup = BeautifulSoup(resp.content, 'html.parser')
            words = [span.text.strip() for span in soup.find_all('span', {'class': 'display-term'})]
            examples = [div.text.strip() for div in soup.find_all('div', {'class': ['src ltr', 'trg ltr']})]
            ex_tuples = list(zip(examples[::2], examples[1::2]))
            return TranslationResult(trg_lang.capitalize(), words, ex_tuples)

        @staticmethod
        def get_translation(tr_data: TranslationData) -> TranslationResult:
            resp = ReversoQuery._make_query(tr_data)
            return ReversoQuery._parse_response(resp, tr_data.trg_lang)
  learner_created: true
- name: translator/data.py
  visible: true
  text: |
    from dataclasses import dataclass
    from typing import List, Tuple


    @dataclass
    class TranslationData:
        src_lang: str
        trg_lang: str
        word: str


    @dataclass
    class TranslationResult:
        target_lang: str
        words: List[str]
        examples: List[Tuple[str, str]]

        def __str__(self):
            words = '\n'.join(w for w in self.words[:5])
            examples = '\n\n'.join(f'{s1}\n{s2}' for s1, s2 in self.examples[:5])
            return f"""
    {self.target_lang} Translations:
    {words}

    {self.target_lang} Examples:
    {examples}"""
  learner_created: true
- name: miracles.txt
  visible: true
  learner_created: true
- name: translator/arguments.py
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/8974#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 03 Feb 2023 14:12:38 UTC"
record: 5
