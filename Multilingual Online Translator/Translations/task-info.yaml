type: edu
files:
- name: translator/translator.py
  visible: true
  text: |
    print('Hello, World!')
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult
    import requests
    from itertools import chain
    from bs4 import BeautifulSoup
    import sys


    if sys.platform.startswith("win"):
        import _locale
        # pylint: disable=protected-access
        _locale._getdefaultlocale = (lambda *args: ['en_US', 'utf8'])

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class TranslatorTest(StageTest):
        def generate(self):
            return [
                TestCase(stdin='fr\nhello\n', attach="fr\nhello"),
                TestCase(stdin='fr\nbrotherhood\n', attach="fr\nbrotherhood"),
                TestCase(stdin='fr\nengland\n', attach="fr\nengland"),
                TestCase(stdin='en\nfromage\n', attach="en\nfromage"),
            ]

        def check(self, reply, attach):
            language, word = attach.split("\n")

            if '200 OK' not in reply:
                return CheckResult.wrong("There isn't internet connection identifier.")

            reply = reply[reply.index("200 OK"):]
            if "translation" not in reply.lower():
                return CheckResult.wrong("Your program should output the word \"Translations\" "
                                         "before printing the translations of the word.\n"
                                         "Also, this word should follow the internet connection identifier.")

            translations = reply[reply.lower().index("translation"):].strip()

            if "example" not in translations.lower():
                return CheckResult.wrong("Your program should output the phrase \"<Language> Examples\" "
                                         "before printing the examples of the translations.\n "
                                         "The examples should also follow the translations.")

            examples_index = translations.lower().index("example")
            examples = translations[examples_index:].strip().split("\n")
            examples = [line for line in examples if line and not line.lower().startswith('example')]

            translations = translations[:examples_index].split("\n")[:-1]
            translations = [line for line in translations if line and not line.lower().startswith('translation')]

            if len(translations) == 0:
                return CheckResult.wrong("No translations are found. \n"
                                         "Make sure that each translated word is placed in a new line.")

            if len(examples) == 0:
                return CheckResult.wrong("No context examples are found. \n"
                                         "Make sure that your context examples follow the translations \n"
                                         "and that each example is placed in a new line.")

            true_translations, true_examples = get_results(language, word)
            if true_translations == "Connection error":
                return CheckResult.wrong("Connection error occurred while connecting to the context.reverso.net\n"
                                         "Please, try again a bit later.")

            translations_intersection = [True for user_translation in translations
                                         if user_translation.lower() in true_translations]

            if not translations_intersection:
                return CheckResult.wrong("No correct translations are found.\n"
                                         "Make sure that you place every word in a new line \n"
                                         "and get rid of lists' commas, quotation marks and square brackets.")

            examples_intersection = [True for user_example in examples if user_example.lower() in true_examples]

            if not examples_intersection:
                return CheckResult.wrong("No correct examples are found.\n"
                                         "Make sure that you place every example in a new line \n"
                                         "and get rid of lists' commas, quotation marks and square brackets.")
            elif len(examples_intersection) < len(examples) // 2:
                return CheckResult.wrong("Please, make sure that the output of your program contains \n"
                                         "the correct examples.")

            if len(true_examples) >= 10 and len(examples) < 10 or \
                    len(true_examples) < 10 and len(true_examples) != len(examples_intersection):
                return CheckResult.wrong("Please, output at least 5 examples for the given word\n"
                                         "(that is, 10 sentences, one for each of two languages). \n"
                                         "If there are less than 5 examples, output them all.\n"
                                         "Make sure that you place every sentence in a new line \n"
                                         "and get rid of lists' commas, quotation marks and square brackets.")

            return CheckResult.correct()


    def get_results(language, word):

        if language == "en":
            lang_to, lang_from = "english", "french"
        else:
            lang_to, lang_from = "french", "english"
        url = f"https://context.reverso.net/translation/{lang_from}-{lang_to}/{word}"
        user_agent = 'Mozilla/5.0'
        try:
            response = requests.get(url, timeout=10, headers={'User-Agent': user_agent})
        except requests.exceptions.ReadTimeout:
            return "Connection error", "Connection error"
        except requests.exceptions.ConnectionError:
                return "Connection error", "Connection error"

        raw_contents = BeautifulSoup(response.content, 'html.parser')
        # translate words
        translations = raw_contents.find_all('span', {'class': 'display-term'})
        # example sentences
        sentences_src, sentences_target = \
            raw_contents.find_all('div', {"class": "src ltr"}), raw_contents.find_all('div', {"class": ["trg ltr", "trg rtl arabic", "trg rtl"]})

        translation_list = [translation.get_text().strip().lower() for translation in translations]
        sentence_list = [sentence.get_text().strip().lower() for sentence in
                         list(chain(*[sentence_pair for sentence_pair in zip(sentences_src, sentences_target)]))]

        return set(translation_list), set(sentence_list)


    if __name__ == '__main__':
        TranslatorTest('translator.translator').run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test.tests import TranslatorTest

    if __name__ == '__main__':
        TranslatorTest('translator.translator').run_tests()
  learner_created: false
- name: translator/menus.py
  visible: true
  text: |
    import dataclasses

    from data import TranslationData, TranslationResult


    class Menus:
        def __init__(self):
            self._lang_to = ''
            self._word = ''

        def choose_lang(self) -> str:
            self._lang_to = input(
                'Type "en" if you want to translate from French into English,'
                ' or "fr" if you want to translate from English into French:\n')

        def choose_word(self) -> str:
            self._word = input('Type the word you want to translate:\n')

        def confirm_chosen(self):
            print(f'You chose "{self._lang_to}" as the language to translate "{self._word}" to.')

        @staticmethod
        def confirm_query():
            print('200 OK')

        @property
        def data(self) -> TranslationData:
            """ Returns the translation data (language, word) """
            lang_from = 'en' if self._lang_to == 'fr' else 'fr'
            return TranslationData(lang_from, self._lang_to, self._word)
  learner_created: true
- name: translator/queries.py
  visible: true
  text: |
    import requests
    from bs4 import BeautifulSoup
    from data import TranslationData, TranslationResult

    REVERSO_LANGS = {'en': 'english',
                     'fr': 'french'}
    HEADERS = {'User-Agent': 'Mozilla/5.0'}


    class ReversoQueries:
        def __init__(self):
            self.resp: requests.Response | None = None
            self._trg_lang = ''

        def _form_url(self, tr_data: TranslationData) -> str:
            src_lang = REVERSO_LANGS.get(tr_data.lang_from)
            self._trg_lang = REVERSO_LANGS.get(tr_data.lang_to)
            return f'https://context.reverso.net/translation/{src_lang}-' \
                   f'{self._trg_lang}/{tr_data.word}'

        def make_query(self, tr_data: TranslationData):
            url = self._form_url(tr_data)
            for _ in range(5):
                r = requests.get(url, headers=HEADERS)
                if r:
                    self.resp = r
                    break

        def parse_response(self):
            soup = BeautifulSoup(self.resp.content, 'html.parser')
            words = [span.text.strip() for span in soup.find_all('span', {'class': 'display-term'})]
            examples = [div.text.strip() for div in soup.find_all('div', {'class': ['src ltr', 'trg ltr']})]
            ex_tuples = list(zip(examples[::2], examples[1::2]))
            return TranslationResult(self._trg_lang.capitalize(), words, ex_tuples)
  learner_created: true
- name: translator/data.py
  visible: true
  text: |
    from dataclasses import  dataclass
    from typing import List, Dict, Tuple


    @dataclass
    class TranslationData:
        lang_from: str
        lang_to: str
        word: str


    @dataclass
    class TranslationResult:
        target_lang: str
        words: List[str]
        examples: List[Tuple[str, str]]

        def __str__(self):
            words = '\n'.join(w for w in self.words[:5])
            examples = '\n\n'.join(f'{s1}\n{s2}' for s1, s2 in self.examples[:5])
            return f"""
    {self.target_lang} Translations:
    {words}

    {self.target_lang} Examples:
    {examples}"""
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/8972#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Wed, 01 Feb 2023 21:40:23 UTC"
record: 3
